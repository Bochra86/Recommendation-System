import numpy as np
import pandas as pd

# Sample movie ratings (UserID, MovieID, Rating)
ratings_data = pd.DataFrame({
    'UserID': [1, 1, 1, 2, 2, 2, 3, 3, 3],
    'MovieID': [1, 2, 3, 1, 2, 4, 1, 3, 4],
    'Rating': [5, 4, 3, 4, 5, 2, 3, 5, 4]
})

# Movie dataset
movies_data = pd.DataFrame({
    'MovieID': [1, 2, 3, 4],
    'Title': ['Movie A', 'Movie B', 'Movie C', 'Movie D']
})

# Number of users and movies
num_users = ratings_data['UserID'].nunique()
num_movies = ratings_data['MovieID'].nunique()

# Create the ratings matrix (User x Movie) with missing ratings as 0
ratings_matrix = ratings_data.pivot_table(index='UserID', columns='MovieID', values='Rating').fillna(0)
R = ratings_matrix.to_numpy()  # Convert DataFrame to NumPy array

# Initialize matrices
K = 2  # Number of latent features
P = np.random.rand(num_users, K)  # User feature matrix (num_users x K)
Q = np.random.rand(num_movies, K)  # Movie feature matrix (num_movies x K)

# Define parameters
num_epochs = 5000  # Number of training iterations
learning_rate = 0.002  # Learning rate for gradient descent
regularization_param = 0.02  # Regularization parameter to avoid overfitting

# Function to train the matrices P and Q
def matrix_factorization(R, P, Q, K, steps, learning_rate, reg_param):
    Q = Q.T  # Transpose for easier matrix multiplication
    
    for step in range(steps):
        for i in range(len(R)):  # Iterate over each user
            for j in range(len(R[i])):  # Iterate over each movie
                if R[i][j] > 0:  # Only consider observed ratings
                    # Calculate the error of the prediction
                    eij = R[i][j] - np.dot(P[i, :], Q[:, j])
                    
                    # Update user and movie latent features using gradient descent
                    for k in range(K):
                        P[i][k] += learning_rate * (2 * eij * Q[k][j] - reg_param * P[i][k])
                        Q[k][j] += learning_rate * (2 * eij * P[i][k] - reg_param * Q[k][j])
        
        # Compute total loss (to monitor convergence)
        loss = 0
        for i in range(len(R)):
            for j in range(len(R[i])):
                if R[i][j] > 0:
                    loss += (R[i][j] - np.dot(P[i, :], Q[:, j]))**2
                    for k in range(K):
                        loss += (reg_param / 2) * (P[i][k]**2 + Q[k][j]**2)  # Regularization term
        
        if step % 1000 == 0:
            print(f"Step {step}, Loss: {loss}")
    
    return P, Q.T

# Train the model
trained_P, trained_Q = matrix_factorization(R, P, Q, K, num_epochs, learning_rate, regularization_param)

# Predict the full ratings matrix (including unseen ratings)
predicted_ratings = np.dot(trained_P, trained_Q.T)

# Convert to DataFrame for easy interpretation
predicted_ratings_df = pd.DataFrame(predicted_ratings, index=ratings_matrix.index, columns=ratings_matrix.columns)
print("\nPredicted Ratings:")
print(predicted_ratings_df)

# Function to recommend movies for a user
def recommend_movies(user_id, predicted_ratings, ratings_matrix, movies_data, num_recommendations=3):
    # Get the user's predicted ratings
    user_ratings = predicted_ratings[user_id - 1]  # UserID is 1-based, so subtract 1
    
    # Get the movies the user hasn't rated yet
    unrated_movies = ratings_matrix.loc[user_id][ratings_matrix.loc[user_id] == 0].index.tolist()
    
    # Get the predicted ratings for these unrated movies
    recommendations = [(movie_id, user_ratings[movie_id - 1]) for movie_id in unrated_movies]
    
    # Sort by predicted rating in descending order
    recommendations = sorted(recommendations, key=lambda x: x[1], reverse=True)
    
    # Get the top movie recommendations
    recommended_movie_ids = [rec[0] for rec in recommendations[:num_recommendations]]
    recommended_movies = movies_data[movies_data['MovieID'].isin(recommended_movie_ids)]
    
    return recommended_movies

# Example: Recommend top 3 movies for User 1
user_id = 1
recommended_movies = recommend_movies(user_id, predicted_ratings, ratings_matrix, movies_data)
print(f"\nRecommended Movies for User {user_id}:")
print(recommended_movies)
